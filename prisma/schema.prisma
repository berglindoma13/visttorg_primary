//Run npx prisma generate everytime a change is made

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model company {
  id         Int       @id @default(autoincrement())
  name       String
  websiteurl String
  products   product[]
  contact    String?
}

model product {
  id                 String               @id @default(uuid())
  productid          String
  title              String
  companyid          Int
  sellingcompany     company              @relation(fields: [companyid], references: [id])
  description        String?
  shortdescription   String?
  categories         category[]           @relation("ConnectedCategory")
  subCategories      subCategory[]        @relation("ConnectedSubCategory")
  url                String? // bætti við spurningarmerki, ef að fyrirtæki eru ekki með vefverslun
  brand              String
  productimageurl    String?
  //productimageref attachedFile?
  certificates       productcertificate[]
  certificateSystems certificatesystem[]  @relation("ConnectedCertficateSystem")
  // myProducts       myProducts[]
  approved           Boolean?
  createdAt          DateTime?
  updatedAt          DateTime?
  vistbokProjects    productsInProjects[]

  @@unique([productid, companyid], name: "productIdentifier")
}

model productcertificate {
  id               Int         @id @default(autoincrement())
  certificateid    Int
  certificate      certificate @relation(fields: [certificateid], references: [id])
  fileurl          String?
  productid        String
  connectedproduct product     @relation(fields: [productid], references: [id])
  validDate        DateTime?

  @@unique([certificateid, productid], name: "prodcertidentifier")
}

model certificate {
  id                 Int                  @id @default(autoincrement())
  name               String
  productcertificate productcertificate[]
}

model certificatesystem {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products product[] @relation("ConnectedCertficateSystem")
}

model category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subCategories subCategory[]
  products      product[]     @relation("ConnectedCategory")
}

model subCategory {
  id                 Int       @id @default(autoincrement())
  name               String
  parentCategoryName String
  parentCategory     category  @relation(fields: [parentCategoryName], references: [name])
  products           product[] @relation("ConnectedSubCategory")

  @@unique([name, parentCategoryName], name: "subCatIdentifier")
}

model manualProducts {
  id Int @id @default(autoincrement())
}

model postlist {
  id    Int    @id @default(autoincrement())
  email String
}

model productsInProjects {
  productId String
  product   product   @relation(fields: [productId], references: [id])
  projectId Int
  project   vistbokProject   @relation(fields: [projectId], references: [id])

  @@id([productId, projectId])
}

model vistbokUser {
  id       Int              @id @default(autoincrement())
  email    String           @unique
  password String
  fullname String
  company  String
  jobtitle String
  projects vistbokProject[]
}

model vistbokProject {
  id                Int         @id @default(autoincrement())
  title             String
  address           String
  country           String
  status            String
  ownerEmail        String
  owner             vistbokUser @relation(fields: [ownerEmail], references: [email])
  // users vistbokUser[]
  // certificatesystem projectCertificateSystem[]
  certificatesystem String?
  products          productsInProjects[]

  @@unique([title, ownerEmail], name: "projectIdentifier")
}

model projectCertificateSystem {
  id           Int                            @id @default(autoincrement())
  title        String
  base         String
  secondlayer  String
  thirdlayer   String
  // projects  vistbokProject[]
  requirements certificateSystemRequirement[]
}

model certificateSystemRequirement {
  id          Int                      @id @default(autoincrement())
  system      projectCertificateSystem @relation(fields: [id], references: [id])
  requirement String
}

// model attachedFile {
//   id       Int       @id @default(autoincrement())
//   connectedproduct product @relation(fields: [id], references: [id])
//   filebytes Bytes
//   filetype String
// } 

// model myProducts {
//   id Int @id @default(autoincrement())
//   productid        String
//   connectedproduct product    @relation(fields: [productid], references: [productid])
// }
